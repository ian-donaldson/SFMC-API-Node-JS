/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.SocialStudioWorkspacesController;
const CreateAWSRequest = testerlib.CreateAWSRequest;
const UpdateAWorkspaceRequest = testerlib.UpdateAWorkspaceRequest;
const DeleteAWorkspaceRequest = testerlib.DeleteAWorkspaceRequest;
const PublishMacroToAWSRequest = testerlib.PublishMacroToAWSRequest;
const PublishMacroRemovedFromWSRequest = testerlib.PublishMacroRemovedFromWSRequest;
const UserToAWSRequest = testerlib.UserToAWSRequest;
const UserRemovedFromWSRequest = testerlib.UserRemovedFromWSRequest;
const EngageMacroToAWSRequest = testerlib.EngageMacroToAWSRequest;
const EngageMacroRemovedFromWSRequest = testerlib.EngageMacroRemovedFromWSRequest;

describe("SocialStudioWorkspacesController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testWorkspacesInOrg response", function testWorkspacesInOrgTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';

        controller.getWorkspacesInOrg(accessToken, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testDeleteAWorkspace response", function testDeleteAWorkspaceTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"visibility": "public", "name": "Sample Workspace", "description": "Workspace created via API"}, 'DeleteAWorkspaceRequest');

        controller.deleteAWorkspace(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testPublishMacroToAWS response", function testPublishMacroToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "publish_macro", "resource_id": "{{publish_macro}}"}, 'PublishMacroToAWSRequest');

        controller.createPublishMacroToAWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testPublishMacroRemovedFromWS response", function testPublishMacroRemovedFromWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "publish_macro", "resource_id": "{{publish_macro}}"}, 'PublishMacroRemovedFromWSRequest');

        controller.deletePublishMacroRemovedFromWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testUserToAWS response", function testUserToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "user", "resource_id": "{{user}}", "access": "admin"}, 'UserToAWSRequest');

        controller.createUserToAWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testUserRemovedFromWS response", function testUserRemovedFromWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "user", "resource_id": "{{user}}"}, 'UserRemovedFromWSRequest');

        controller.deleteUserRemovedFromWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testEngageMacroToAWS response", function testEngageMacroToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "engage_macro", "resource_id": "{{engage_macro}}"}, 'EngageMacroToAWSRequest');

        controller.createEngageMacroToAWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testEngageMacroRemovedFromWS response", function testEngageMacroRemovedFromWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"workspace_id": "{{ws}}", "resource_type": "engage_macro", "resource_id": "{{engage_macro}}"}, 'EngageMacroRemovedFromWSRequest');

        controller.deleteEngageMacroRemovedFromWS(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testTopicProfileToAWS response", function testTopicProfileToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let workspaceId = '{{ws}}';
        let resourceType = 'topic_profile';
        let resourceId = '{topic_profile}}';

        controller.createTopicProfileToAWS(accessToken, workspaceId, resourceType, resourceId, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testTemplateToAWS response", function testTemplateToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let workspaceId = '{{ws}}';
        let resourceType = 'template';
        let resourceId = '{{template}}';

        controller.createTemplateToAWS(accessToken, workspaceId, resourceType, resourceId, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testSocialPropertyToAWS response", function testSocialPropertyToAWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let workspaceId = '{{ws}}';
        let resourceType = 'social_property';
        let resourceId = '{{social_property}}';

        controller.createSocialPropertyToAWS(accessToken, workspaceId, resourceType, resourceId, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testSocialPropertyRemovedFromWS response", function testSocialPropertyRemovedFromWSTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let workspaceId = '{{ws}}';
        let resourceType = 'social_property';
        let resourceId = '{{social_property}}';

        controller.deleteSocialPropertyRemovedFromWS(accessToken, workspaceId, resourceType, resourceId, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
