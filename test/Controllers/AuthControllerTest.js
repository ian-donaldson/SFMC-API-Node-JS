/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.AuthController;
const RequestSFMCTokenRequest = testerlib.RequestSFMCTokenRequest;

describe("AuthController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * To obtain an OAuth token, perform a HTTP POST specifying your clientID and clientSecret in the payload.

https://code.exacttarget.com/apis-sdks/rest-api/v1/auth/requestToken.html
     */
    it("should testRequestSFMCToken response", function testRequestSFMCTokenTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"clientId": "{{clientId}}", "clientSecret": "{{clientSecret}}"}, 'RequestSFMCTokenRequest');

        controller.createRequestSFMCToken(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testRequestSocialAPIToken response", function testRequestSocialAPITokenTest(done) {
        // parameters for the API call
        let grantType = 'password';
        let clientId = '{{socialClientKey}}';
        let clientSecret = '{{socialClientSecret}}';
        let username = '{{r6username}}';
        let password = '{{r6password}}';

        controller.createRequestSocialAPIToken(grantType, clientId, clientSecret, username, password, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
