/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.SocialStudioPostController;
const UpdateAWorkspaceRequest = testerlib.UpdateAWorkspaceRequest;
const CreateAWSRequest = testerlib.CreateAWSRequest;
const ChangeUserPasswordRequest = testerlib.ChangeUserPasswordRequest;
const UpdateKeywordGroupInATopicProfileCopyRequest = testerlib.UpdateKeywordGroupInATopicProfileCopyRequest;
const MediaType = testerlib.MediaType;
const UpdateSourceRequest = testerlib.UpdateSourceRequest;
const CreateSourceRequest = testerlib.CreateSourceRequest;
const UnshareSharedContentRequest = testerlib.UnshareSharedContentRequest;
const Asset91 = testerlib.Asset91;
const Contain79 = testerlib.Contain79;
const AndContain = testerlib.AndContain;
const Contain = testerlib.Contain;
const Parameter = testerlib.Parameter;
const ApplyAuthorCommentRequest = testerlib.ApplyAuthorCommentRequest;
const DeleteATagFromAnAuthorRequest = testerlib.DeleteATagFromAnAuthorRequest;
const ApplyAuthorTagRequest = testerlib.ApplyAuthorTagRequest;
const From = testerlib.From;
const IncludedAudience = testerlib.IncludedAudience;
const Keys52 = testerlib.Keys52;
const Subscriber = testerlib.Subscriber;
const Attribute = testerlib.Attribute;
const IncrementColumnObjectIDRequest = testerlib.IncrementColumnObjectIDRequest;
const IncrementColumnKeyRequest = testerlib.IncrementColumnKeyRequest;
const UpsertRowObjectIDRequest = testerlib.UpsertRowObjectIDRequest;
const UpsertRowKeyRequest = testerlib.UpsertRowKeyRequest;
const UpsertRowSetKeyRequest = testerlib.UpsertRowSetKeyRequest;
const EngageMacroRemovedFromWSRequest = testerlib.EngageMacroRemovedFromWSRequest;
const EngageMacroToAWSRequest = testerlib.EngageMacroToAWSRequest;
const UserRemovedFromWSRequest = testerlib.UserRemovedFromWSRequest;
const UserToAWSRequest = testerlib.UserToAWSRequest;
const PublishMacroRemovedFromWSRequest = testerlib.PublishMacroRemovedFromWSRequest;
const PublishMacroToAWSRequest = testerlib.PublishMacroToAWSRequest;
const DeleteAWorkspaceRequest = testerlib.DeleteAWorkspaceRequest;
const UpdateSourceGroupInATopicProfileRequest = testerlib.UpdateSourceGroupInATopicProfileRequest;
const UpdateTopicRequest = testerlib.UpdateTopicRequest;
const CreateTopicRequest = testerlib.CreateTopicRequest;
const Keys = testerlib.Keys;
const UpsertRowSetObjectIDRequest = testerlib.UpsertRowSetObjectIDRequest;
const UpdateSourceGroupRequest = testerlib.UpdateSourceGroupRequest;
const CreateSourceGroupRequest = testerlib.CreateSourceGroupRequest;
const CreateSharedContentRequest = testerlib.CreateSharedContentRequest;
const Asset = testerlib.Asset;
const Item84 = testerlib.Item84;
const ApprovalProceduresERRORSRequest = testerlib.ApprovalProceduresERRORSRequest;
const CreateApprovalFlowAkaRuleRequest = testerlib.CreateApprovalFlowAkaRuleRequest;
const UpdateKeywordGroupInATopicProfileRequest = testerlib.UpdateKeywordGroupInATopicProfileRequest;
const CreateKeywordGroupRequest = testerlib.CreateKeywordGroupRequest;
const UpdateTopicKeywordGroupRequest = testerlib.UpdateTopicKeywordGroupRequest;
const EditMacroRequest = testerlib.EditMacroRequest;
const CreateSendToSalesforceMacroRequest = testerlib.CreateSendToSalesforceMacroRequest;
const CreateMacroAllActionsRequest = testerlib.CreateMacroAllActionsRequest;
const Value = testerlib.Value;
const Item = testerlib.Item;
const AttributeSet = testerlib.AttributeSet;
const Action = testerlib.Action;
const AssociateAssetSToACampaignRequest = testerlib.AssociateAssetSToACampaignRequest;
const CreateMacroRequest = testerlib.CreateMacroRequest;
const PushSendByMessageIdRequest = testerlib.PushSendByMessageIdRequest;
const ContactAttributes = testerlib.ContactAttributes;
const To = testerlib.To;
const MessageDefinitionSendEmailRequest = testerlib.MessageDefinitionSendEmailRequest;
const Application = testerlib.Application;
const QueueMORequest = testerlib.QueueMORequest;
const Center = testerlib.Center;
const Values = testerlib.Values;
const AssetRequest = testerlib.AssetRequest;
const CreateContactRequest = testerlib.CreateContactRequest;
const ValidateEmailRequest = testerlib.ValidateEmailRequest;
const RequestSFMCTokenRequest = testerlib.RequestSFMCTokenRequest;
const CreateSharedContentAndAssociateItWithPostRequest = testerlib.CreateSharedContentAndAssociateItWithPostRequest;
const CreateSharedContentImageTypeFromScratchInWSRequest = testerlib.CreateSharedContentImageTypeFromScratchInWSRequest;
const CreateSharedContentInWSRequest = testerlib.CreateSharedContentInWSRequest;
const CreateACampaignRequest = testerlib.CreateACampaignRequest;
const SubscriberAttributes = testerlib.SubscriberAttributes;
const MessageSendRequest = testerlib.MessageSendRequest;
const CreateLocationRequest = testerlib.CreateLocationRequest;
const UpdateUserRequest = testerlib.UpdateUserRequest;
const CreateMessageRequest = testerlib.CreateMessageRequest;


describe("SocialStudioPostController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testListPostsWithAPostTag response", function testListPostsWithAPostTagTest(done) {
        // parameters for the API call
        let topics = '{{MATPID}}';
        let includeWorkflow = true;
        let postLabel = '%23firstNBStorm';
        let accessToken = '{{access_token}}';

        controller.listPostsWithAPostTag(topics, includeWorkflow, postLabel, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListPostsWithWorkflowAudit response", function testListPostsWithWorkflowAuditTest(done) {
        // parameters for the API call
        let topics = '{{MATPID}}';
        let includeAuditTrail = true;
        let postLabel = '%23firstNBStorm';
        let startDate = 1450108943;
        let accessToken = '{{access_token}}';

        controller.listPostsWithWorkflowAudit(topics, includeAuditTrail, postLabel, startDate, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListPostsPerAssignedUser response", function testListPostsPerAssignedUserTest(done) {
        // parameters for the API call
        let topics = '{{MATPID}}';
        let includeWorkflow = true;
        let assignedUser = '{{userId}}';
        let accessToken = '{{access_token}}';

        controller.listPostsPerAssignedUser(topics, includeWorkflow, assignedUser, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListPostsWithinATimeframe response", function testListPostsWithinATimeframeTest(done) {
        // parameters for the API call
        let topics = '{{MATPID}}';
        let maxOffset = 1843744091;
        let limit = 1;
        let accessToken = '{{access_token}}';

        controller.listPostsWithinATimeframe(topics, maxOffset, limit, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListPostsBetweenStartEndDateInAscendingOrder response", function testListPostsBetweenStartEndDateInAscendingOrderTest(done) {
        // parameters for the API call
        let topics = '{{topicId}}';
        let startDate = 1425182400000;
        let endDate = 1427857200000;
        let sortBy = 'blogPostId-ascending';

        controller.listPostsBetweenStartEndDateInAscendingOrder(topics, startDate, endDate, sortBy, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListPostsByID response", function testListPostsByIDTest(done) {
        // parameters for the API call
        let topics = 2857;
        let includeWorkflow = true;
        let beforeId = 1879741076;
        let limit = 1;
        let accessToken = '{{access_token}}';

        controller.listPostsByID(topics, includeWorkflow, beforeId, limit, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Get posts that match the topic within the last 24 hours.
     */
    it("should testListMostRecent50Posts response", function testListMostRecent50PostsTest(done) {
        // parameters for the API call
        let topics = '{{topicId}}';
        let limit = 50;
        let authAppkey = '{{auth_appkey}}';
        let authToken = '{{auth_token}}';

        controller.listMostRecent50Posts(topics, limit, authAppkey, authToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
