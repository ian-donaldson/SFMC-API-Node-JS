/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.SFMCSOAPSubscribersController;
const UpdateAWorkspaceRequest = testerlib.UpdateAWorkspaceRequest;
const CreateAWSRequest = testerlib.CreateAWSRequest;
const ChangeUserPasswordRequest = testerlib.ChangeUserPasswordRequest;
const UpdateKeywordGroupInATopicProfileCopyRequest = testerlib.UpdateKeywordGroupInATopicProfileCopyRequest;
const MediaType = testerlib.MediaType;
const UpdateSourceRequest = testerlib.UpdateSourceRequest;
const CreateSourceRequest = testerlib.CreateSourceRequest;
const UnshareSharedContentRequest = testerlib.UnshareSharedContentRequest;
const Asset91 = testerlib.Asset91;
const Contain79 = testerlib.Contain79;
const AndContain = testerlib.AndContain;
const Contain = testerlib.Contain;
const Parameter = testerlib.Parameter;
const ApplyAuthorCommentRequest = testerlib.ApplyAuthorCommentRequest;
const DeleteATagFromAnAuthorRequest = testerlib.DeleteATagFromAnAuthorRequest;
const ApplyAuthorTagRequest = testerlib.ApplyAuthorTagRequest;
const From = testerlib.From;
const IncludedAudience = testerlib.IncludedAudience;
const Keys52 = testerlib.Keys52;
const Subscriber = testerlib.Subscriber;
const Attribute = testerlib.Attribute;
const IncrementColumnObjectIDRequest = testerlib.IncrementColumnObjectIDRequest;
const IncrementColumnKeyRequest = testerlib.IncrementColumnKeyRequest;
const UpsertRowObjectIDRequest = testerlib.UpsertRowObjectIDRequest;
const UpsertRowKeyRequest = testerlib.UpsertRowKeyRequest;
const UpsertRowSetKeyRequest = testerlib.UpsertRowSetKeyRequest;
const EngageMacroRemovedFromWSRequest = testerlib.EngageMacroRemovedFromWSRequest;
const EngageMacroToAWSRequest = testerlib.EngageMacroToAWSRequest;
const UserRemovedFromWSRequest = testerlib.UserRemovedFromWSRequest;
const UserToAWSRequest = testerlib.UserToAWSRequest;
const PublishMacroRemovedFromWSRequest = testerlib.PublishMacroRemovedFromWSRequest;
const PublishMacroToAWSRequest = testerlib.PublishMacroToAWSRequest;
const DeleteAWorkspaceRequest = testerlib.DeleteAWorkspaceRequest;
const UpdateSourceGroupInATopicProfileRequest = testerlib.UpdateSourceGroupInATopicProfileRequest;
const UpdateTopicRequest = testerlib.UpdateTopicRequest;
const CreateTopicRequest = testerlib.CreateTopicRequest;
const Keys = testerlib.Keys;
const UpsertRowSetObjectIDRequest = testerlib.UpsertRowSetObjectIDRequest;
const UpdateSourceGroupRequest = testerlib.UpdateSourceGroupRequest;
const CreateSourceGroupRequest = testerlib.CreateSourceGroupRequest;
const CreateSharedContentRequest = testerlib.CreateSharedContentRequest;
const Asset = testerlib.Asset;
const Item84 = testerlib.Item84;
const ApprovalProceduresERRORSRequest = testerlib.ApprovalProceduresERRORSRequest;
const CreateApprovalFlowAkaRuleRequest = testerlib.CreateApprovalFlowAkaRuleRequest;
const UpdateKeywordGroupInATopicProfileRequest = testerlib.UpdateKeywordGroupInATopicProfileRequest;
const CreateKeywordGroupRequest = testerlib.CreateKeywordGroupRequest;
const UpdateTopicKeywordGroupRequest = testerlib.UpdateTopicKeywordGroupRequest;
const EditMacroRequest = testerlib.EditMacroRequest;
const CreateSendToSalesforceMacroRequest = testerlib.CreateSendToSalesforceMacroRequest;
const CreateMacroAllActionsRequest = testerlib.CreateMacroAllActionsRequest;
const Value = testerlib.Value;
const Item = testerlib.Item;
const AttributeSet = testerlib.AttributeSet;
const Action = testerlib.Action;
const AssociateAssetSToACampaignRequest = testerlib.AssociateAssetSToACampaignRequest;
const CreateMacroRequest = testerlib.CreateMacroRequest;
const PushSendByMessageIdRequest = testerlib.PushSendByMessageIdRequest;
const ContactAttributes = testerlib.ContactAttributes;
const To = testerlib.To;
const MessageDefinitionSendEmailRequest = testerlib.MessageDefinitionSendEmailRequest;
const Application = testerlib.Application;
const QueueMORequest = testerlib.QueueMORequest;
const Center = testerlib.Center;
const Values = testerlib.Values;
const AssetRequest = testerlib.AssetRequest;
const CreateContactRequest = testerlib.CreateContactRequest;
const ValidateEmailRequest = testerlib.ValidateEmailRequest;
const RequestSFMCTokenRequest = testerlib.RequestSFMCTokenRequest;
const CreateSharedContentAndAssociateItWithPostRequest = testerlib.CreateSharedContentAndAssociateItWithPostRequest;
const CreateSharedContentImageTypeFromScratchInWSRequest = testerlib.CreateSharedContentImageTypeFromScratchInWSRequest;
const CreateSharedContentInWSRequest = testerlib.CreateSharedContentInWSRequest;
const CreateACampaignRequest = testerlib.CreateACampaignRequest;
const SubscriberAttributes = testerlib.SubscriberAttributes;
const MessageSendRequest = testerlib.MessageSendRequest;
const CreateLocationRequest = testerlib.CreateLocationRequest;
const UpdateUserRequest = testerlib.UpdateUserRequest;
const CreateMessageRequest = testerlib.CreateMessageRequest;


describe("SFMCSOAPSubscribersController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testSubscribersRetrieveToken response", function testSubscribersRetrieveTokenTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n   <s:Header>\n      <a:Action s:mustUnderstand="1">Retrieve</a:Action>\n      <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n      <a:ReplyTo>\n         <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n      </a:ReplyTo>\n      <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n      <fueloauth xmlns="http://exacttarget.com">{{accessToken}}</fueloauth>\n   </s:Header>\n   <s:Body xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">\n         <RetrieveRequest>\n            <ObjectType>Subscriber</ObjectType>\n            <Properties>SubscriberKey</Properties>\n            <Properties>EmailAddress</Properties>\n            <Properties>Status</Properties>\n            <Filter xmlns:q1="http://exacttarget.com/wsdl/partnerAPI" xsi:type="q1:SimpleFilterPart">\n               <q1:Property>SubscriberKey</q1:Property>\n               <q1:SimpleOperator>equals</q1:SimpleOperator>\n               <q1:Value>subkey_001</q1:Value>\n            </Filter>\n         </RetrieveRequest>\n      </RetrieveRequestMsg>\n   </s:Body>\n</s:Envelope>';

        controller.createSubscribersRetrieveToken(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testSubscriberCreateUP response", function testSubscriberCreateUPTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n    <s:Header>\n        <a:Action s:mustUnderstand="1">Create</a:Action>\n        <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n        <a:ReplyTo>\n            <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n        </a:ReplyTo>\n        <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n        <o:Security xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" s:mustUnderstand="1">\n            <o:UsernameToken>\n                <o:Username>{{soapUsername}}</o:Username>\n                <o:Password><![CDATA[{{soapPassword}}]]></o:Password>\n            </o:UsernameToken>\n        </o:Security>\n    </s:Header>\n    <s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n        <CreateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">\n            <Options>\n                <SaveOptions>\n                    <SaveOption>\n                        <PropertyName>*</PropertyName>\n                        <SaveAction>UpdateAdd</SaveAction>\n                    </SaveOption>\n                </SaveOptions>\n                <!--\n                <RequestType>Asynchronous</RequestType>\n                <QueuePriority>High</QueuePriority>\n                <SendResponseTo>\n                    <ResponseType>email</ResponseType>\n                    <ResponseAddress>your_address@salesforce.com</ResponseAddress>\n                    <RespondWhen>OnCallComplete</RespondWhen>\n                    <IncludeResults>true</IncludeResults>\n                    <IncludeObjects>true</IncludeObjects>\n  \t\t        </SendResponseTo>\n                -->\n            </Options>\n            <Objects xsi:type="Subscriber">\n                <!--\n                  <Client><ID>1084813</ID>\n                  </Client>\n                -->\n                <SubscriberKey>subkey_001</SubscriberKey>\n                <EmailAddress>your_address@salesforce.com</EmailAddress>\n            </Objects>\n        </CreateRequest>\n    </s:Body>\n</s:Envelope>';

        controller.createSubscriberCreateUP(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testSubscriberRetrieveUP response", function testSubscriberRetrieveUPTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n   <s:Header>\n      <a:Action s:mustUnderstand="1">Retrieve</a:Action>\n      <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n      <a:ReplyTo>\n         <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n      </a:ReplyTo>\n      <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n      <o:Security xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" s:mustUnderstand="1">\n         <o:UsernameToken>\n            <o:Username>{{soapUsername}}</o:Username>\n            <o:Password><![CDATA[{{soapPassword}}]]></o:Password>\n         </o:UsernameToken>\n      </o:Security>\n   </s:Header>\n   <s:Body xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n      <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">\n         <RetrieveRequest>\n            <ObjectType>Subscriber</ObjectType>\n            <Properties>SubscriberKey</Properties>\n            <Properties>EmailAddress</Properties>\n            <Properties>Status</Properties>\n            <Filter xmlns:q1="http://exacttarget.com/wsdl/partnerAPI" xsi:type="q1:SimpleFilterPart">\n               <q1:Property>SubscriberKey</q1:Property>\n               <q1:SimpleOperator>equals</q1:SimpleOperator>\n               <q1:Value>subkey_001</q1:Value>\n            </Filter>\n         </RetrieveRequest>\n      </RetrieveRequestMsg>\n   </s:Body>\n</s:Envelope>';

        controller.createSubscriberRetrieveUP(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
