/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.SFMCSOAPDataExtensionsController;
const UpdateAWorkspaceRequest = testerlib.UpdateAWorkspaceRequest;
const CreateAWSRequest = testerlib.CreateAWSRequest;
const ChangeUserPasswordRequest = testerlib.ChangeUserPasswordRequest;
const UpdateKeywordGroupInATopicProfileCopyRequest = testerlib.UpdateKeywordGroupInATopicProfileCopyRequest;
const MediaType = testerlib.MediaType;
const UpdateSourceRequest = testerlib.UpdateSourceRequest;
const CreateSourceRequest = testerlib.CreateSourceRequest;
const UnshareSharedContentRequest = testerlib.UnshareSharedContentRequest;
const Asset91 = testerlib.Asset91;
const Contain79 = testerlib.Contain79;
const AndContain = testerlib.AndContain;
const Contain = testerlib.Contain;
const Parameter = testerlib.Parameter;
const ApplyAuthorCommentRequest = testerlib.ApplyAuthorCommentRequest;
const DeleteATagFromAnAuthorRequest = testerlib.DeleteATagFromAnAuthorRequest;
const ApplyAuthorTagRequest = testerlib.ApplyAuthorTagRequest;
const From = testerlib.From;
const IncludedAudience = testerlib.IncludedAudience;
const Keys52 = testerlib.Keys52;
const Subscriber = testerlib.Subscriber;
const Attribute = testerlib.Attribute;
const IncrementColumnObjectIDRequest = testerlib.IncrementColumnObjectIDRequest;
const IncrementColumnKeyRequest = testerlib.IncrementColumnKeyRequest;
const UpsertRowObjectIDRequest = testerlib.UpsertRowObjectIDRequest;
const UpsertRowKeyRequest = testerlib.UpsertRowKeyRequest;
const UpsertRowSetKeyRequest = testerlib.UpsertRowSetKeyRequest;
const EngageMacroRemovedFromWSRequest = testerlib.EngageMacroRemovedFromWSRequest;
const EngageMacroToAWSRequest = testerlib.EngageMacroToAWSRequest;
const UserRemovedFromWSRequest = testerlib.UserRemovedFromWSRequest;
const UserToAWSRequest = testerlib.UserToAWSRequest;
const PublishMacroRemovedFromWSRequest = testerlib.PublishMacroRemovedFromWSRequest;
const PublishMacroToAWSRequest = testerlib.PublishMacroToAWSRequest;
const DeleteAWorkspaceRequest = testerlib.DeleteAWorkspaceRequest;
const UpdateSourceGroupInATopicProfileRequest = testerlib.UpdateSourceGroupInATopicProfileRequest;
const UpdateTopicRequest = testerlib.UpdateTopicRequest;
const CreateTopicRequest = testerlib.CreateTopicRequest;
const Keys = testerlib.Keys;
const UpsertRowSetObjectIDRequest = testerlib.UpsertRowSetObjectIDRequest;
const UpdateSourceGroupRequest = testerlib.UpdateSourceGroupRequest;
const CreateSourceGroupRequest = testerlib.CreateSourceGroupRequest;
const CreateSharedContentRequest = testerlib.CreateSharedContentRequest;
const Asset = testerlib.Asset;
const Item84 = testerlib.Item84;
const ApprovalProceduresERRORSRequest = testerlib.ApprovalProceduresERRORSRequest;
const CreateApprovalFlowAkaRuleRequest = testerlib.CreateApprovalFlowAkaRuleRequest;
const UpdateKeywordGroupInATopicProfileRequest = testerlib.UpdateKeywordGroupInATopicProfileRequest;
const CreateKeywordGroupRequest = testerlib.CreateKeywordGroupRequest;
const UpdateTopicKeywordGroupRequest = testerlib.UpdateTopicKeywordGroupRequest;
const EditMacroRequest = testerlib.EditMacroRequest;
const CreateSendToSalesforceMacroRequest = testerlib.CreateSendToSalesforceMacroRequest;
const CreateMacroAllActionsRequest = testerlib.CreateMacroAllActionsRequest;
const Value = testerlib.Value;
const Item = testerlib.Item;
const AttributeSet = testerlib.AttributeSet;
const Action = testerlib.Action;
const AssociateAssetSToACampaignRequest = testerlib.AssociateAssetSToACampaignRequest;
const CreateMacroRequest = testerlib.CreateMacroRequest;
const PushSendByMessageIdRequest = testerlib.PushSendByMessageIdRequest;
const ContactAttributes = testerlib.ContactAttributes;
const To = testerlib.To;
const MessageDefinitionSendEmailRequest = testerlib.MessageDefinitionSendEmailRequest;
const Application = testerlib.Application;
const QueueMORequest = testerlib.QueueMORequest;
const Center = testerlib.Center;
const Values = testerlib.Values;
const AssetRequest = testerlib.AssetRequest;
const CreateContactRequest = testerlib.CreateContactRequest;
const ValidateEmailRequest = testerlib.ValidateEmailRequest;
const RequestSFMCTokenRequest = testerlib.RequestSFMCTokenRequest;
const CreateSharedContentAndAssociateItWithPostRequest = testerlib.CreateSharedContentAndAssociateItWithPostRequest;
const CreateSharedContentImageTypeFromScratchInWSRequest = testerlib.CreateSharedContentImageTypeFromScratchInWSRequest;
const CreateSharedContentInWSRequest = testerlib.CreateSharedContentInWSRequest;
const CreateACampaignRequest = testerlib.CreateACampaignRequest;
const SubscriberAttributes = testerlib.SubscriberAttributes;
const MessageSendRequest = testerlib.MessageSendRequest;
const CreateLocationRequest = testerlib.CreateLocationRequest;
const UpdateUserRequest = testerlib.UpdateUserRequest;
const CreateMessageRequest = testerlib.CreateMessageRequest;


describe("SFMCSOAPDataExtensionsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testDataExtensionRowsUpsertUP response", function testDataExtensionRowsUpsertUPTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n   <s:Header>\n      <a:Action s:mustUnderstand="1">Create</a:Action>\n      <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n      <a:ReplyTo>\n         <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n      </a:ReplyTo>\n      <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n      <o:Security xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" s:mustUnderstand="1">\n         <o:UsernameToken>\n            <o:Username>{{soapUsername}}</o:Username>\n            <o:Password><![CDATA[{{soapPassword}}]]></o:Password>\n         </o:UsernameToken>\n      </o:Security>\n   </s:Header>\n\t<s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n\t\t<UpdateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">\n        <!--\n            <Options>\n             <SendResponseTo>\n      \t\t<ResponseType>email</ResponseType>\n      \t\t<ResponseAddress>your_address@salesforce.com</ResponseAddress>\n      \t\t<RespondWhen>OnCallComplete</RespondWhen>\n      \t\t<IncludeResults>true</IncludeResults>\n      \t\t<IncludeObjects>true</IncludeObjects>\n  \t\t   </SendResponseTo>\n             <RequestType>Asynchronous</RequestType>\n      \t    </Options>\n      \t-->\n      \t<Options>\n            <SaveOptions>\n               <SaveOption>\n                  <PropertyName>DataExtensionObject</PropertyName>\n                  <SaveAction>UpdateAdd</SaveAction>\n               </SaveOption>\n            </SaveOptions>\n         </Options>\n      \t    <Objects xsi:type="DataExtensionObject">\n                <CustomerKey>de_custkey</CustomerKey>\n                <Keys>\n                    <Key>\n                        <Name>Subscriber Key</Name>\n                        <Value>0035677WUEIW323KLA</Value>\n                    </Key>\n                    <Key>\n                        <Name>Email Address</Name>\n                        <Value>jonas@gmail.com</Value>\n                    </Key>\n                </Keys>\n                <Properties>\n                    <Property>\n                        <Name>First Name</Name>\n                        <Value>Jonas</Value>\n                    </Property>\n                    <Property>\n                        <Name>Signup Date</Name>\n                        <Value>2015-11-21T10:00:00-04:00</Value>\n                    </Property>\n                </Properties>\n            </Objects>\n            <Objects xsi:type="DataExtensionObject">\n                <CustomerKey>de_custkey</CustomerKey>\n                <Keys>\n                    <Key>\n                        <Name>Subscriber Key</Name>\n                        <Value>0035677FHGFH323GHR</Value>\n                    </Key>\n                    <Key>\n                        <Name>Email Address</Name>\n                        <Value>wepeel@gmail.com</Value>\n                    </Key>\n                </Keys>\n                <Properties>\n                    <Property>\n                        <Name>First Name</Name>\n                        <Value>Wepeel</Value>\n                    </Property>\n                    <Property>\n                        <Name>Signup Date</Name>\n                        <Value>2015-12-24T12:22:33-07:00</Value>\n                    </Property>\n                </Properties>\n            </Objects>\n\t\t</UpdateRequest>\n\t</s:Body>\n</s:Envelope>';

        controller.createDataExtensionRowsUpsertUP(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testDataExtensionCreateUP response", function testDataExtensionCreateUPTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n   <s:Header>\n      <a:Action s:mustUnderstand="1">Create</a:Action>\n      <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n      <a:ReplyTo>\n         <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n      </a:ReplyTo>\n      <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n      <o:Security xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" s:mustUnderstand="1">\n         <o:UsernameToken>\n            <o:Username>{{soapUsername}}</o:Username>\n            <o:Password><![CDATA[{{soapPassword}}]]></o:Password>\n         </o:UsernameToken>\n      </o:Security>\n   </s:Header>\n\t<s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n\t\t<CreateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">\n        <!--\n            <Options>\n             <SendResponseTo>\n      \t\t<ResponseType>email</ResponseType>\n      \t\t<ResponseAddress>your_address@salesforce.com</ResponseAddress>\n      \t\t<RespondWhen>OnCallComplete</RespondWhen>\n      \t\t<IncludeResults>true</IncludeResults>\n      \t\t<IncludeObjects>true</IncludeObjects>\n  \t\t   </SendResponseTo>\n             <RequestType>Asynchronous</RequestType>\n      \t    </Options>\n      \t-->\n         <Objects xsi:type="DataExtension">\n            <!--\n            <Client>\n                <ID>10798224</ID>\n            </Client>\n            -->\n            <CustomerKey>de_custkey</CustomerKey>\n            <Name>Data Extension Name</Name>\n            <!-- Specify folder DE created in\n            <CategoryID>432655</CategoryID>\n            -->\n            <IsSendable>true</IsSendable>\n            <SendableDataExtensionField>\n                <CustomerKey>SubscriberKey</CustomerKey>\n                <Name>Subscriber Key</Name>\n                <FieldType>Text</FieldType>\n            </SendableDataExtensionField>\n            <SendableSubscriberField>\n                <Name>Subscriber Key</Name>\n                <Value/>\n            </SendableSubscriberField>\n            <Fields>\n                <Field>\n                    <CustomerKey>SubscriberKey</CustomerKey>\n                    <Name>Subscriber Key</Name>\n                    <FieldType>Text</FieldType>\n                    <MaxLength>50</MaxLength>\n                    <IsRequired>true</IsRequired>\n                    <IsPrimaryKey>true</IsPrimaryKey>\n                </Field>\n                <Field>\n                    <CustomerKey>EmailAddress</CustomerKey>\n                    <Name>Email Address</Name>\n                    <FieldType>EmailAddress</FieldType>\n                    <IsRequired>true</IsRequired>\n                    <IsPrimaryKey>true</IsPrimaryKey>\n                </Field>\n                <Field>\n                    <CustomerKey>FirstName</CustomerKey>\n                    <Name>First Name</Name>\n                    <FieldType>Text</FieldType>\n                    <IsNillable>true</IsNillable>\n                    <IsPrimaryKey>false</IsPrimaryKey>\n                </Field>\n                <Field>\n                    <CustomerKey>SignupDate</CustomerKey>\n                    <Name>Signup Date</Name>\n                    <DataType>Date</DataType>\n                    <IsNillable>true</IsNillable>\n                    <IsPrimaryKey>false</IsPrimaryKey>\n                    <FieldType>Date</FieldType>\n                </Field> \n            </Fields>\n         </Objects>\n\t\t</CreateRequest>\n\t</s:Body>\n</s:Envelope>';

        controller.createDataExtensionCreateUP(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Retrieves contents of a data extension.
     */
    it("should testDataExtensionRowsRetrieveUP response", function testDataExtensionRowsRetrieveUPTest(done) {
        // parameters for the API call
        let contentType = 'text/xml';
        let body = '<?xml version="1.0" encoding="UTF-8"?>\n<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">\n   <s:Header>\n      <a:Action s:mustUnderstand="1">Retrieve</a:Action>\n      <a:MessageID>urn:uuid:7e0cca04-57bd-4481-864c-6ea8039d2ea0</a:MessageID>\n      <a:ReplyTo>\n         <a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>\n      </a:ReplyTo>\n      <a:To s:mustUnderstand="1">{{soapEndPoint}}</a:To>\n      <o:Security xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" s:mustUnderstand="1">\n         <o:UsernameToken>\n            <o:Username>{{soapUsername}}</o:Username>\n            <o:Password><![CDATA[{{soapPassword}}]]></o:Password>\n         </o:UsernameToken>\n      </o:Security>\n   </s:Header>\n\t<s:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n\t    <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">\n         <RetrieveRequest>\n            <ObjectType>DataExtensionObject[Data Extension Name]</ObjectType>\n            <Properties>Subscriber Key</Properties>\n            <Properties>Email Address</Properties>\n            <Properties>First Name</Properties>\n            <Properties>Signup Date</Properties>\n            <Filter xmlns:q1="http://exacttarget.com/wsdl/partnerAPI" xsi:type="q1:SimpleFilterPart">\n               <q1:Property>First Name</q1:Property>\n               <q1:SimpleOperator>equals</q1:SimpleOperator>\n               <q1:Value>Wepeel</q1:Value>\n            </Filter>\n         </RetrieveRequest>\n      </RetrieveRequestMsg>\n\t</s:Body>\n</s:Envelope>';

        controller.createDataExtensionRowsRetrieveUP(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
