/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.SocialStudioEngageMacrosController;
const CreateMacroRequest = testerlib.CreateMacroRequest;
const CreateMacroAllActionsRequest = testerlib.CreateMacroAllActionsRequest;
const CreateSendToSalesforceMacroRequest = testerlib.CreateSendToSalesforceMacroRequest;
const EditMacroRequest = testerlib.EditMacroRequest;

describe("SocialStudioEngageMacrosController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testListMacros response", function testListMacrosTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';

        controller.listMacros(accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListMacroDetails response", function testListMacroDetailsTest(done) {
        // parameters for the API call
        let authToken = '{{AutoIntShubSuperAuthToken}}';
        let authAppkey = 'radian6-integration';
        let accept = 'application/json';
        let contentType = 'application/json';

        controller.listMacroDetails(authToken, authAppkey, accept, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateMacro response", function testCreateMacroTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"name": "Urgent - Laptop Support Issue", "description": "Urgent Laptop Issues to be adressed ASAP", "actions": [{"type": "SetPriority", "value": "3"}, {"type": "AddPostNote", "value": "Laptop"}, {"type": "SendToSalesforceScs", "value": "00DD00000007aAJMAY", "parameters": [{"name": "case", "value": "on"}, {"name": "lead", "value": "off"}]}]}, 'CreateMacroRequest');

        controller.createMacro(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateMacroAllActions response", function testCreateMacroAllActionsTest(done) {
        // parameters for the API call
        let authToken = '{{maultAuthToken}}';
        let authAppkey = 'radian6-integration';
        let accept = 'application/json';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"name": "macro - 192 regress", "description": "macrodescription", "actions": [{"type": "AddPostTag", "value": "192-regress-PT"}, {"type": "AddSourceTag", "value": "192-regress-ST"}, {"type": "SetClassification", "value": "3"}, {"type": "AssignUser", "value": "3594"}, {"type": "SetEngagement", "value": "1"}, {"type": "SetPriority", "value": "2"}, {"type": "AddPostNote", "value": "192-regress-post note"}, {"type": "SetSentiment", "value": "10"}, {"type": "SetSpamStatus", "value": "0"}, {"type": "SendToSalesforceScs", "value": "00DD00000007U9kMAE", "parameters": [{"name": "case", "value": "on"}]}]}, 'CreateMacroAllActionsRequest');

        controller.createMacroAllActions(authToken, authAppkey, accept, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateSendToSalesforceMacro response", function testCreateSendToSalesforceMacroTest(done) {
        // parameters for the API call
        let authToken = '{{maultAuthToken}}';
        let authAppkey = 'radian6-integration';
        let accept = 'application/json';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"name": "marit macro lead on case off", "description": "macrodescription", "actions": [{"type": "AddPostTag", "value": "lead and case, 195 pt"}, {"type": "AddSourceTag", "value": "195 st"}, {"type": "SetClassification", "value": "3"}, {"type": "AssignUser", "value": "4"}, {"type": "SetEngagement", "value": "1"}, {"type": "SetPriority", "value": "2"}, {"type": "AddPostNote", "value": "195 post note"}, {"type": "SetSentiment", "value": "10"}, {"type": "SetSpamStatus", "value": "0"}, {"type": "SendToSalesforceScs", "value": "00DD00000007gAMMAY", "parameters": [{"name": "case", "value": "off"}, {"name": "lead", "value": "on"}]}]}, 'CreateSendToSalesforceMacroRequest');

        controller.createSendToSalesforceMacro(authToken, authAppkey, accept, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
