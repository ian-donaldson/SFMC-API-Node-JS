/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.SocialStudioPublishApprovalRulesController;
const CreateApprovalFlowAkaRuleRequest = testerlib.CreateApprovalFlowAkaRuleRequest;
const ApprovalProceduresERRORSRequest = testerlib.ApprovalProceduresERRORSRequest;

describe("SocialStudioPublishApprovalRulesController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testListHydratedApprovalRulesInAWorkspace response", function testListHydratedApprovalRulesInAWorkspaceTest(done) {
        // parameters for the API call
        let ownerType = 'workspace';
        let ownerId = '{{workspaceId}}';
        let accessToken = '{{access_token}}';

        controller.listHydratedApprovalRulesInAWorkspace(ownerType, ownerId, accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateApprovalFlowAkaRule response", function testCreateApprovalFlowAkaRuleTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"name": "My Approval Rule - API", "trigger": "Publish", "priority": "21", "workspace": "{{ws}}"}, 'CreateApprovalFlowAkaRuleRequest');

        controller.createApprovalFlowAkaRule(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * {
  "status": true,
  "response": {
    "items": [
      {
        "criteria": "submitter",
        "operator": "equals",
        "argument": 219472
      },
      {
        "criteria": "social account",
        "operator": "equals",
        "argument": 805927
      }
    ],
    "query": "1 AND 2"
  },
  "meta": []
}
     */
    it("should testApprovalPrerequisites response", function testApprovalPrerequisitesTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';

        controller.createApprovalPrerequisites(accessToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * {
  "status": true,
  "response": {
    "items": [
      {
        "criteria": "submitter",
        "operator": "equals",
        "argument": 219472
      },
      {
        "criteria": "social account",
        "operator": "equals",
        "argument": 805927
      }
    ],
    "query": "1 AND 2"
  },
  "meta": []
}
     */
    it("should testApprovalPrerequisites1 response", function testApprovalPrerequisites1Test(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let body = '{\n    "items": [\n        {\n            "criteria": "submitter", \n            "operator": "equals", \n            "argument": "{{user}}\n        }, \n        {\n            "criteria": "social account", \n            "operator": "equals", \n            "argument": {{social_property}}"\n        }, \n        {\n            "criteria": "social account", \n            "operator": "equals", \n            "argument": "{{social_property2}}"\n        }\n    ], \n    "query": "(1 AND 2) OR ( 1 AND 3 )"\n}';

        controller.updateApprovalPrerequisites(accessToken, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
