/*
 * SalesforceMarketingCloudLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.SocialStudioSourcesAndSourceGroupsController;
const CreateSourceGroupRequest = testerlib.CreateSourceGroupRequest;
const UpdateSourceGroupRequest = testerlib.UpdateSourceGroupRequest;
const CreateSourceRequest = testerlib.CreateSourceRequest;
const UpdateSourceRequest = testerlib.UpdateSourceRequest;

describe("SocialStudioSourcesAndSourceGroupsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testListSourceGroups response", function testListSourceGroupsTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';

        controller.listSourceGroups(accessToken, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateSourceGroup response", function testCreateSourceGroupTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"title": "New source group created via API", "description": "A description of what this source group contains.", "public": false}, 'CreateSourceGroupRequest');

        controller.createSourceGroup(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testDeleteSourceGroup response", function testDeleteSourceGroupTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';

        controller.deleteSourceGroup(accessToken, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testListSourceInAGroup response", function testListSourceInAGroupTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';

        controller.listSourceInAGroup(accessToken, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateSource response", function testCreateSourceTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"title": "", "uri": "https://twitter.com/LAVAgency234"}, 'CreateSourceRequest');

        controller.createSource(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testUpdateSource response", function testUpdateSourceTest(done) {
        // parameters for the API call
        let accessToken = '{{access_token}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({"title": "", "uri": "https://twitter.com/LAVAgency1"}, 'UpdateSourceRequest');

        controller.updateSource(accessToken, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
